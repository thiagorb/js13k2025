// src/catSvg.ts
export type CatRole = 'head' | 'body' | 'tail' | 'legs' | 'body-side';

const renderedImages = new Map<string, HTMLImageElement>();
const BLOCK_SIZE = 30;

function createCatSvg(color: string, role: CatRole): string {
    const viewBox = '0 0 100 100';
    let path = '';

    switch (role) {
        case 'head':
            // A more angular head with triangle ears and a defined snout area
            path = `
            <path d="m26.018 91.909-15.551-0.60161 5.1743-4.2546c6.4162-5.2756 5.373-6.8772-1.9299-2.9631-4.4978 2.4107-5.4661 2.5409-5.4661 0.73522 0-1.2069 2.6659-3.5545 5.9243-5.2168 5.6279-2.8712 8.5537-7.2503 3.5651-5.3359-1.2976 0.49791-4.0295 1.3245-6.0709 1.8369-3.057 0.76726-3.6188 0.44875-3.1848-1.8045 0.33913-1.7601 2.5046-3.2038 6.071-4.0472 7.8051-1.8458 7.1454-4.5555-0.81826-3.3613l-6.3623 0.95407 0.61464-22.877 0.61468-22.877-7.0443-7.5309c-3.8744-4.142-6.6135-7.5309-6.087-7.5309 0.52652 0 6.5043 2.9992 13.284 6.6649 14.206 7.6809 17.267 8.2276 17.267 3.0833 0-8.196 0.19252-8.2671 22.357-8.2671h20.559l0.94733 5.9243c0.62957 3.937 1.7125 5.9243 3.2282 5.9243 1.2545 0 7.8278-2.9992 14.608-6.6649 6.7796-3.6657 12.718-6.6649 13.196-6.6649 0.47803 0-2.1816 3.571-5.9102 7.9354-6.6175 7.7458-8.29 11.319-5.2983 11.319 0.91692 0 1.4811 7.905 1.4811 20.753v20.753l-5.9243-0.94733c-7.6369-1.2212-7.9536 1.6193-0.38036 3.4103 3.5664 0.84343 5.732 2.2872 6.071 4.0472 0.43379 2.2534-0.12782 2.5717-3.1848 1.8045-2.0414-0.51237-4.7734-1.339-6.071-1.8369-4.9886-1.9143-2.0628 2.4648 3.5651 5.3359 3.2584 1.6623 5.9244 4.0629 5.9244 5.3347 0 1.9194-0.89411 1.7597-5.2617-0.9396-7.0658-4.367-8.3918-2.4399-2.051 2.9808l5.0911 4.3524-9.6271 0.06793c-5.2949 0.03737-15.959 0.30167-23.697 0.58705-7.7387 0.2857-21.068 0.2483-29.622-0.08247zm18.2-18.065c5.3926-2.7493 5.6014-2.7493 10.994 0 3.0234 1.5414 6.3558 2.8025 7.4055 2.8025 3.6169 0 1.8304-3.7082-2.9387-6.0996-4.754-2.3838-5.1305-3.518-3.2385-9.755 0.80838-2.6649 0.28103-3.4433-2.8674-4.2335-8.5137-2.1368-14.529 2.9002-9.486 7.9431 2.0314 2.0314 0.60836 4.0082-4.8681 6.7624-3.8818 1.9522-5.4939 5.3826-2.5296 5.3826 1.1176 0 4.5055-1.2611 7.5289-2.8025zm-15.141-15.023c4.1534-2.2228 3.6568-7.0981-0.83795-8.2262-5.6235-1.4114-11.108 0.45954-11.108 3.7897 0 4.9227 6.516 7.3426 11.946 4.4365zm52.852-2.5216c1.9669-2.9795 1.9314-3.4127-0.35174-4.2888-1.4874-0.57079-3.0821-0.11805-3.8486 1.0926-0.93558 1.4776-1.3154 1.5392-1.3316 0.21596-0.014-1.0646-1.9108-1.8514-4.466-1.8514-5.0171 0-5.8753 2.7996-2.0354 6.6395 3.2126 3.2126 9.3253 2.2943 12.033-1.8078z" fill="#f08c19" stroke-width="1.4811"/><path d="m-21.836-11.082c-0.72346 0-2.2299 1.393-3.3465 3.0972-2.5338 3.867-2.3282 4.1981 13.038 20.888l11.245 12.212v22.05c0 23.544-0.00389 23.553-6.2993 23.553-1.3076 0-2.3776 0.44605-2.3776 0.99083 0 0.54494 1.9536 0.7643 4.3395 0.48557l4.3374-0.50745v10.91l-7.3689 3.3837s-6.7082 3.259-6.9477 5.2866c-0.43258 3.6611 14.629-5.4603 14.633-4.9022 0.013722 2.4173 0.18994 6.7062 0.18994 6.7062-0.14214 1.3459-9.492 3.8822-7.5855 6.6528 0.93616 1.3605 8.0162-3.0367 8.005-1.3069l-0.010238 1.5796 99.996 0.04713 0.0792-2.0906c0.0375-0.98894 3.1177 0.30546 3.1177-0.0456 0-0.68167-0.83667-1.5607-1.8592-1.9532-2.0124-0.77222-2.727-10.363-0.7721-10.363 0.59843 0 3.1609 0.86659 5.6935 1.9248 2.5326 1.058 5.2121 1.7216 5.9538 1.4742 0.74168-0.24724-1.8208-1.7354-5.6935-3.3072l-7.0408-2.8588v-10.866l4.648-0.09843c4.8017-0.10109 4.5864-0.39038-1.2402-1.6754l-3.4078-0.75242 0.0371-23.835 0.0371-23.835 11.118-12.096c11.673-12.699 13.532-16.893 8.6485-19.506-1.9486-1.0429-6.3728-0.13451-20.95 4.2958l-18.478 5.6169h-64.498l-17.962-5.5775c-9.8799-3.0676-18.555-5.5775-19.279-5.5775zm10.4 13.303 5.5775 2.8172c3.0676 1.5488 10.394 5.5256 16.282 8.8388 12.489 7.0278 14.697 7.4205 14.72 2.616 0.0093-1.8746 0.35252-4.6627 0.76336-6.1965 0.73849-2.7559 1.0019-2.7888 22.177-2.7888h21.429l0.85304 6.1965c0.46868 3.4076 1.2172 6.4076 1.6645 6.669 0.44737 0.2612 8.271-3.6668 17.384-8.7316 9.1135-5.0645 16.748-9.0313 16.967-8.8125 0.21863 0.21862-3.7266 4.847-8.7666 10.285-9.149 9.8706-10.928 12.986-7.4192 12.986 1.58-1e-6 1.8592 3.1756 1.8592 21.157v21.16l-7.1261-0.77211c-8.1518-0.88446-6.6959 1.0136 1.8592 2.4235 4.7924 0.78993 5.267 1.1936 5.267 4.4773-1e-6 4.1796-1.9178 4.6018-7.5811 1.6733-2.0574-1.064-4.3998-1.6956-5.2057-1.4042-0.80585 0.29118 1.741 1.9672 5.6607 3.7249 5.9825 2.6828 7.1261 3.7044 7.1261 6.3628-1e-6 3.9555-0.7497 3.9509-6.6252-0.04156-6.7793-4.6068-7.0151-2.7968-0.26685 2.0495 3.109 2.2327 5.6541 4.5215 5.6541 5.0876h-0.0022c0 0.56603-18.404 1.0302-40.9 1.0302-26.697 0-40.9-0.4344-40.9-1.2511 0-0.68814 2.2096-2.7799 4.9104-4.648 2.7008-1.8681 4.9283-3.8305 4.9564-4.3592 0.0587-1.1994-6.9513 2.3487-8.0032 4.0508-1.5443 2.4986-4.3439 1.2625-4.3439-1.9182 0-2.6583 1.1458-3.68 7.1283-6.3628 3.9197-1.7577 6.4665-3.4336 5.6607-3.7249-0.8059-0.29118-3.1483 0.34249-5.2057 1.4064-5.6854 2.94-7.5833 2.5076-7.5833-1.7279 0-3.2708 0.49674-3.744 4.648-4.4205 8.447-1.3765 10.26-3.166 2.3972-2.3666l-7.2093 0.73273 0.27778-23.106 0.27778-23.106-6.7499-7.0496c-3.7115-3.8772-7.8422-8.3784-9.1799-10.002zm36.055 48.89c-0.90292 0.01-1.8888 0.07628-2.9506 0.2056-5.4268 0.66087-5.9301 1.3968-3.4974 5.1095 2.3956 3.6561 8.13 4.2652 11.205 1.1899 3.841-3.8409 1.5632-6.5745-4.7573-6.5049zm55.662 1.0149c-1.0226 0-1.7191 0.68422-1.5486 1.5202 0.17041 0.83593-0.94658 1.7124-2.4804 1.9467-3.2662 0.49832-3.8058-1.7788-0.619-2.6116 1.1929-0.31198-0.20007-0.63168-3.0972-0.71086-5.7771-0.15768-6.2144 0.43483-3.34 4.5386 2.2912 3.2712 8.1067 3.698 10.998 0.8071 2.4685-2.4685 2.5161-5.49 0.0875-5.49zm-54.533 1.2402c1.7042 0 3.0972 0.49802 3.0972 1.1068 0 1.4267-2.6548 2.4013-4.648 1.7061-2.7019-0.94249-1.6702-2.8128 1.5508-2.8128zm23.474 3.7184c-7.3553 0-8.7699 1.9023-4.7333 6.3628 2.8235 3.1199 1.2937 5.907-4.4883 8.1782-2.7271 1.0712-4.9585 2.4205-4.9585 2.9987 0 2.8552 11.931-1.2569 13.194-4.5473 0.65155-1.698 1.2494-1.5267 4.0552 1.1614 3.5537 3.4037 11.258 5.7162 11.258 3.3771 0-0.75386-1.3417-1.7077-2.9812-2.1195-1.6395-0.41148-4.215-2.0617-5.7241-3.6681l-2.7428-2.9222 2.6094-3.3159c1.4351-1.8245 2.3055-3.8102 1.9335-4.4117-0.37176-0.60156-3.7125-1.0936-7.4214-1.0936z" fill="#171210" stroke-width="4.6844"/>


            `;
            break;
        case 'body':
            // A simple, rounded square body
            path = `
                <rect x="10" y="10" width="80" height="80" rx="10" ry="10" fill="${color}" />
            `;
            break;
        case 'body-side':
            // A rectangular body for horizontal pieces
            path = `
                <rect x="10" y="30" width="80" height="40" rx="10" ry="10" fill="${color}" />
            `;
            break;
        case 'tail':
            // A simple, geometric tail that curls slightly
            path = `
                <path d="M20 90 Q30 40 70 50 L80 50" stroke="${color}" stroke-width="15" fill="none" stroke-linecap="round" />
            `;
            break;
        case 'legs':
            // Simple rectangular leg shapes
            path = `
                <rect x="15" y="60" width="25" height="30" fill="${color}" />
                <rect x="60" y="60" width="25" height="30" fill="${color}" />
            `;
            break;
    }
    return `<svg xmlns="http://www.w3.org/2000/svg" viewBox="${viewBox}">${path}</svg>`;
}

export function drawCatBlock(ctx: CanvasRenderingContext2D, x: number, y: number, color: string, role: CatRole) {
    const key = `${color}-${role}`;
    const img = renderedImages.get(key);
    if (img) {
        ctx.drawImage(img, x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    }
}

export function preloadCatImages(pieces: { color: string; roles: (CatRole | null)[][] }[]): Promise<void> {
    const roles: CatRole[] = ['head', 'body', 'tail', 'legs', 'body-side'];
    const colors = pieces.map((p) => p.color);
    const allCombinations = new Set<string>();
    colors.forEach((color) => roles.forEach((role) => allCombinations.add(`${color}-${role}`)));

    const promises: Promise<void>[] = [];

    for (const key of allCombinations) {
        const [color, role] = key.split('-');
        const svgString = createCatSvg(color, role as CatRole);
        const url = `data:image/svg+xml;base64,${btoa(svgString)}`;

        const promise = new Promise<void>((resolve) => {
            const img = new Image();
            img.onload = () => {
                renderedImages.set(key, img);
                resolve();
            };
            img.src = url;
        });
        promises.push(promise);
    }

    return Promise.all(promises).then(() => {});
}
